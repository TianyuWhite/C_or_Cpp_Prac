/*
L1-005. 考试座位号

时间限制
200 ms
内存限制
65536 kB
代码长度限制
8000 B
判题程序
Standard
作者
陈越

每个PAT考生在参加考试时都会被分配两个座位号，一个是试机座位，一个是考试座位。正常情况下，考生在入场时先得到试机座位号码，入座进入试机状态后，系统会显示该考生的考试座位号码，考试时考生需要换到考试座位就座。但有些考生迟到了，试机已经结束，他们只能拿着领到的试机座位号码求助于你，从后台查出他们的考试座位号码。

输入格式：

输入第一行给出一个正整数N（<=1000），随后N行，每行给出一个考生的信息：“准考证号 试机座位号 考试座位号”。其中准考证号由14位数字组成，座位从1到N编号。输入保证每个人的准考证号都不同，并且任何时候都不会把两个人分配到同一个座位上。

考生信息之后，给出一个正整数M（<=N），随后一行中给出M个待查询的试机座位号码，以空格分隔。

输出格式：

对应每个需要查询的试机座位号码，在一行中输出对应考生的准考证号和考试座位号码，中间用1个空格分隔。
输入样例：

4
10120150912233 2 4
10120150912119 4 1
10120150912126 1 3
10120150912002 3 2
2
3 4

输出样例：

10120150912002 2
10120150912119 1


*/
//运用结构体的版本
#include <stdio.h>
#include <stdlib.h>
#define MAX_num 1000
typedef struct student {
    double num;
    int trynum;
    int exnum;
}STUDENT;

int main(){
    STUDENT stu[MAX_num];
    int n, i, m, j;
    scanf("%d", &n);
    for(i=0;i<n;i++){
        scanf("%lf %d %d", &stu[i].num, &stu[i].trynum, &stu[i].exnum);
    }
    scanf("%d", &m);
    int a[m];
    for(i=0;i<m;i++){
        scanf("%d", &a[i]);
    }
    for(i=0;i<m;i++){
        j=0;
        while(stu[j].trynum!=a[i]){
            j++;
        }
        printf("%14.0lf %d\n", stu[j].num, stu[j].exnum);
    }
    return 0;
}

#include <stdio.h>
#include <stdlib.h>

struct student{
    char id[14];
    int s1;
    int s2;
}s[1000];

int main()
{
    int n, num, i, number, j;
    scanf("%d", &n);
    for(i=0;i<n;i++){
        scanf("%s %d %d", &s[i].id, &s[i].s1, &s[i].s2);
    }
    scanf("%d", &num);
    for(i=0;i<num;i++){
        scanf("%d", &number);
        for(j=0;j<n;j++){
            if(s[j].s1==number){
                printf("%s %d\n", s[j].id, s[j].s2);
            }
        }
    }
    return 0;
}


//只用数组
#include <stdio.h>
#include <stdlib.h>
#define MAX_num 1000

int main()
{
    int n,m;
    double a[1001];
    int b[1001];
    int c[1001];
    int d[1001];
    int i,j;
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        scanf("%lf %d %d",&a[i],&b[i],&c[i]);
    }
    scanf("%d",&m);
    for(i=0;i<m;i++)
    {
        scanf("%d",&d[i]);
    }
    for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
        {
            if(d[i]==b[j])
                printf("%.lf %d\n",a[j],c[j]);
        }
    }
    return 0;
}
