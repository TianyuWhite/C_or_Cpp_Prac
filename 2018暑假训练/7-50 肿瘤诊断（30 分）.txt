7-50 肿瘤诊断（30 分）
在诊断肿瘤疾病时，计算肿瘤体积是很重要的一环。给定病灶扫描切片中标注出的疑似肿瘤区域，请你计算肿瘤的体积。

输入格式：
输入第一行给出4个正整数：M、N、L、T，其中M和N是每张切片的尺寸（即每张切片是一个M×N的像素矩阵。最大分辨率是1286×128）；L（≤60）是切片的张数；T是一个整数阈值（若疑似肿瘤的连通体体积小于T，则该小块忽略不计）。

最后给出L张切片。每张用一个由0和1组成的M×N的矩阵表示，其中1表示疑似肿瘤的像素，0表示正常像素。由于切片厚度可以认为是一个常数，于是我们只要数连通体中1的个数就可以得到体积了。麻烦的是，可能存在多个肿瘤，这时我们只统计那些体积不小于T的。两个像素被认为是“连通的”，如果它们有一个共同的切面，如下图所示，所有6个红色的像素都与蓝色的像素连通。



输出格式：
在一行中输出肿瘤的总体积。

输入样例：
3 4 5 2
1 1 1 1
1 1 1 1
1 1 1 1
0 0 1 1
0 0 1 1
0 0 1 1
1 0 1 1
0 1 0 0
0 0 0 0
1 0 1 1
0 0 0 0
0 0 0 0
0 0 0 1
0 0 0 1
1 0 0 0
输出样例：
26



#include <iostream>
#include <bits/stdc++.h>
using namespace std;

int m, n, l, t, sum=0;
int maze[70][1300][130];
int dz[]={1, -1, 0, 0, 0, 0};
int dy[]={0, 0, 1, -1, 0, 0};
int dx[]={0, 0, 0, 0, 1, -1};

struct point{
    int x;
    int y;
    int z;
}p, f;

int BFS(int z, int x, int y){
    int s = 1;
    queue<point> q;
    f.z = z;
    f.x = x;
    f.y = y;
    q.push(f);
    maze[z][x][y] = 0;
    while(!q.empty()){
        p = q.front();
        q.pop();
        for(int i=0;i<6;i++){
            if((p.z+dz[i])<1 || (p.x+dx[i])<1 || (p.y+dy[i])<1 || (p.z+dz[i])>l || (p.x+dx[i])>m || (p.y+dy[i])>n || maze[p.z+dz[i]][p.x+dx[i]][p.y+dy[i]]==0){}
            else{
                maze[p.z+dz[i]][p.x+dx[i]][p.y+dy[i]] = 0;
                s++;
                p.z = p.z+dz[i];
                p.x = p.x+dx[i];
                p.y = p.y+dy[i];
                q.push(p);
            }
        }
    }
    if(s>=t){
        return s;
    }
    else{
        return 0;
    }
}

int main()
{
    cin>>m>>n>>l>>t;
    for(int i=1;i<=l;i++){
        for(int j=1;j<=m;j++){
            for(int k=1;k<=n;k++){
                scanf("%d", &maze[i][j][k]);
            }
        }
    }
    for(int i=1;i<=l;i++){
        for(int j=1;j<=m;j++){
            for(int k=1;k<=n;k++){
                if(maze[i][j][k]==1){
                    sum = sum + BFS(i, j, k);
                }
            }
        }
    }
    cout<<sum<<endl;
    return 0;
}

