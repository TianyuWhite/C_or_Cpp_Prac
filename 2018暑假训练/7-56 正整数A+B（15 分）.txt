7-56 正整数A+B（15 分）
题的目标很简单，就是求两个正整数A和B的和，其中A和B都在区间[1,1000]。稍微有点麻烦的是，输入并不保证是两个正整数。

输入格式：
输入在一行给出A和B，其间以空格分开。问题是A和B不一定是满足要求的正整数，有时候可能是超出范围的数字、负数、带小数点的实数、甚至是一堆乱码。

注意：我们把输入中出现的第1个空格认为是A和B的分隔。题目保证至少存在一个空格，并且B不是一个空字符串。

输出格式：
如果输入的确是两个正整数，则按格式A + B = 和输出。如果某个输入不合要求，则在相应位置输出?，显然此时和也是?。

输入样例1：
123 456
输出样例1：
123 + 456 = 579
输入样例2：
22. 18
输出样例2：
? + 18 = ?
输入样例3：
-100 blabla bla...33
输出样例3：
? + ? = ?


#include <iostream>
#include <bits/stdc++.h>

using namespace std;

int main()
{
    int flag1=0, flag2=0;
    int n1, n2;
    string s1, s2;
    cin>>s1;
    getchar();
    getline(cin, s2);
    if(s1=="0"){
        flag1=1;
    }
    else if(s1.length()>0&&s1.length()<4){
        for(int i=0;i<s1.length();i++){
            if(!isdigit(s1[i])){
                flag1=1;
                break;
            }
        }
    }
    else if(s1=="1000"){
        n1 = 1000;
    }
    else{
        flag1 = 1;
    }
    if(s2=="0"){
        flag2=1;
    }
    else if(s2.length()>0&&s2.length()<4){
        for(int i=0;i<s2.length();i++){
            if(!isdigit(s2[i])){
                flag2=1;
                break;
            }
        }
    }
    else if(s2=="1000"){
        n2 = 1000;
    }
    else{
        flag2 = 1;
    }
    if(flag1==0 && flag2==0){
        n1 = atoi(s1.c_str());
        n2 = atoi(s2.c_str());
        printf("%d + %d = %d", n1, n2, n1+n2);
    }
    else if(flag1==0 && flag2==1){
        n1 = atoi(s1.c_str());
        printf("%d + ? = ?", n1);
    }
    else if(flag1==1 && flag2==0){
        n2 = atoi(s2.c_str());
        printf("? + %d = ?", n2);
    }else{
        printf("? + ? = ?");
    }
    return 0;
}
