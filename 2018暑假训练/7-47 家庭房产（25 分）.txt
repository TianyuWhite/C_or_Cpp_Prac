7-47 家庭房产（25 分）
给定每个人的家庭成员和其自己名下的房产，请你统计出每个家庭的人口数、人均房产面积及房产套数。

输入格式：
输入第一行给出一个正整数N（≤1000），随后N行，每行按下列格式给出一个人的房产：

编号 父 母 k 孩子1 ... 孩子k 房产套数 总面积
其中编号是每个人独有的一个4位数的编号；父和母分别是该编号对应的这个人的父母的编号（如果已经过世，则显示-1）；k（0≤k≤5）是该人的子女的个数；孩子i是其子女的编号。

输出格式：
首先在第一行输出家庭个数（所有有亲属关系的人都属于同一个家庭）。随后按下列格式输出每个家庭的信息：

家庭成员的最小编号 家庭人口数 人均房产套数 人均房产面积
其中人均值要求保留小数点后3位。家庭信息首先按人均面积降序输出，若有并列，则按成员编号的升序输出。

输入样例：
10
6666 5551 5552 1 7777 1 100
1234 5678 9012 1 0002 2 300
8888 -1 -1 0 1 1000
2468 0001 0004 1 2222 1 500
7777 6666 -1 0 2 300
3721 -1 -1 1 2333 2 150
9012 -1 -1 3 1236 1235 1234 1 100
1235 5678 9012 0 1 50
2222 1236 2468 2 6661 6662 1 300
2333 -1 3721 3 6661 6662 6663 1 100
输出样例：
3
8888 1 1.000 1000.000
0001 15 0.600 100.000
5551 4 0.750 100.000




#include <iostream>
#include <bits/stdc++.h>
using namespace std;

struct famliy{
    int id;
    int fid;
    int mid;
    int people;
    double hnum;
    double area;
}f1[100000], f2[100000];

int flag[100000]={0};
int visit[100000]={0};
vector<int>v[100000];

void DFS(int x, int y){
    if(f2[y].id>x){
        f2[y].id = x;
    }
    f2[y].people++;
    visit[x] = 1;
    f2[y].hnum = f2[y].hnum + f1[x].hnum;
    f2[y].area = f2[y].area + f1[x].area;

    for(int i=0;i<(int)v[x].size();i++){
        if(visit[v[x][i]]==0){
            DFS(v[x][i], y);
        }
    }
}

bool cmp(famliy fa1, famliy fa2){
    if(fa1.area==fa2.area){
        return fa1.id<fa2.id;
    }
    else{
        return fa1.area>fa2.area;
    }
}

int main()
{
    int n, x, y, faid, moid, k;
    cin>>n;
    for(int i=0;i<n;i++){
        cin>>x;
        flag[x]=1;
        cin>>faid>>moid>>k;
        if(faid!=-1){
            v[x].push_back(faid);
            v[faid].push_back(x);
        }
        if(moid!=-1){
            v[x].push_back(moid);
            v[moid].push_back(x);
        }
        for(int j=0;j<k;j++){
            cin>>y;
            v[x].push_back(y);
            v[y].push_back(x);
        }
        cin>>f1[x].hnum>>f1[x].area;
    }
    int sum=0;
    for(int i=0;i<=10000;i++){
        if(flag[i]&&visit[i]==0){
            f2[sum].id=100000;
            f2[sum].people = 0;
            f2[sum].hnum = 0;
            f2[sum].area = 0;
            DFS(i, sum);
            f2[sum].area = f2[sum].area/f2[sum].people;
            f2[sum].hnum = f2[sum].hnum/f2[sum].people;
            sum++;
        }
    }
    sort(f2, f2+sum, cmp);
    cout<<sum<<endl;
    for(int i=0;i<sum;i++){
        printf("%04d %d %.3lf %.3lf\n", f2[i].id, f2[i].people, f2[i].hnum, f2[i].area);
    }
    return 0;
}
